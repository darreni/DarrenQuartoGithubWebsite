[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DarrenQuartoGithubWebsite",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is an experimental site generated by Darren Irwin on 16 May 2023."
  },
  {
    "objectID": "QuartoInstallNotes.html",
    "href": "QuartoInstallNotes.html",
    "title": "Quarto Installation Notes",
    "section": "",
    "text": "These are notes on how I set up Quarto for use with Julia. I am taking these notes both to try out Quarto and to record the steps involved. I hope this will be of use for myself, students, and maybe others.\nI am assuming you already have both Julia and Visual Studio Code (i.e., VS Code) installed, with the Julia extension in VS Code. If not, follow the instructions here: https://code.visualstudio.com/docs/languages/julia . (Another option is to use some other text editor, but I highly recommend VS Code and assume it below.)\nThe following is for MacOS:\nFirst, I got set up with Juliaup and the newest version of Julia:"
  },
  {
    "objectID": "QuartoInstallNotes.html#install-juliaup-julia-version-manager",
    "href": "QuartoInstallNotes.html#install-juliaup-julia-version-manager",
    "title": "Quarto Installation Notes",
    "section": "Install Juliaup (Julia version manager)",
    "text": "Install Juliaup (Julia version manager)\nFirst, install Juliaup using this command in the Terminal:\ncurl -fsSL https://install.julialang.org | sh\nYou can then check whether you have installed Julia versions using:\njuliaup status\nIf you have no Julia version yet, or do have a version but want to upgrade to the latest, get the latest release version using:\njuliaup update release\nAt the time of writing this, the latest version of Julia is 1.9.0. The version installed on my machine is 1.9.0+0.x64.apple.darwin14.\nIf you also want an older version as an option, you can install it using something like juliaup add 1.8.5. (Not needed for most users, since newer versions of Julia run older code.)"
  },
  {
    "objectID": "QuartoInstallNotes.html#install-quarto-and-dependencies",
    "href": "QuartoInstallNotes.html#install-quarto-and-dependencies",
    "title": "Quarto Installation Notes",
    "section": "Install Quarto (and dependencies)",
    "text": "Install Quarto (and dependencies)\nThis is a somewhat lengthy process, because running Quarto relies on several other software packages, including Jupyter and iJulia. But the results are worth it! üòÉ\nI learned much of the below from: https://quarto.org/docs/computations/julia.html\nDownload and install Quarto from this site: https://quarto.org/docs/get-started/ . The version I have installed is Quarto CLI 1.3.353 (Mac OS).\nInstall the Quarto extension for VS Code (using the standard way of choosing extensions in VS Code).\n\nIJulia\nThis is a Julia package that is needed to render your Quarto files. To install, start a Julia REPL either in VS Code (using View &gt; Command Palette &gt; Julia: Start REPL) or in a terminal window by typing Julia. Then type these commands:\nusing Pkg\nPkg.add(\"IJulia\")\nThis takes a couple minutes to install, with all the dependencies.\n\n\nJupyter\nJupyter notebooks can be used with Julia, Python, and R (and the name is sort of a combination of those). Quarto uses Jupyter as an intermediate step in processing the code into output. To install Jupyter, we simply need to call an IJulia command (see below) and this will trigger a prompt asking you whether to install Jupyter. Say yes (unless perhaps you already have Jupyter installed).\nusing IJulia\nnotebook()\nThen the computer will ask install Jupyter via Conda, y/n? to which you can respond ‚Äúy‚Äù.\nAfter some processing, a Jupyter browser window will open. You can choose quit to close, and the Julia prompt returns in the REPL. After this initializing of Jupyter, you don‚Äôt need to open Jupyter in this way again (Quarto will simply use Jupyter directly).\n\n\nRevise.jl\nThis package enables Quarto to interact more efficiently with Julia when you change code. In a Julia REPL, type:\nusing Pkg\nPkg.add(\"Revise\")\nTo set up Revise to launch automatically within IJulia, create a text file containing the following:\ntry\n  @eval using Revise\ncatch e\n  @warn \"Revise init\" exception=(e, catch_backtrace())\nend\nSave the above file as .julia/config/startup_ijulia.jl (the dot at the start means this directory is hidden‚Äìthe computer will probably ask you to confirm that you want to do this).\n\n\nJupyter-cache\nThis enables smart and efficient re-execution of parts of your code (only the parts dependent on changes you‚Äôve made). In the Julia REPL, execute:\nusing Pkg\nPkg.add(\"Conda\")\nusing Conda\nConda.add(\"jupyter-cache\")"
  },
  {
    "objectID": "QuartoInstallNotes.html#almost-there",
    "href": "QuartoInstallNotes.html#almost-there",
    "title": "Quarto Installation Notes",
    "section": "Almost there!",
    "text": "Almost there!\nAfter the above, Quarto is essentially installed and should work well for rendering in HTML or DOCX. However, I found a few more things are needed for a satisfying experience rendering in PDF:\n\nlibrsvg and BasicTeX\nbrew install librsvg homebrew/cask/basictex\nFor some reason, the download of this was really slow. Administrator password was then needed, then after a while it finished successfully.\n\n\nTinyTeX\ncurl -sL \"https://yihui.org/tinytex/install-bin-unix.sh\" | sh\n\n\nJuliaMono font\nThis font works well with monocode symbols used in Julia (without it, many of these symbols were missing from PDF output).\nbrew tap homebrew/cask-fonts\nbrew install --cask font-juliamono"
  },
  {
    "objectID": "QuartoInstallNotes.html#try-a-demo-quarto-file",
    "href": "QuartoInstallNotes.html#try-a-demo-quarto-file",
    "title": "Quarto Installation Notes",
    "section": "Try a demo Quarto file",
    "text": "Try a demo Quarto file\nOK we are now ready to do a little prayer to the Quarto and Julia gods and try this all out. In VS Code make a new file called QuartoDemo.qmd. The .qmd ending is important as it tells VS Code this is a Quarto file. Put this in the file:\n---\ntitle: \"Demo Quarto File\"\nauthor: \"Darren Irwin\"\ndate: \"5/13/2023\"\nexecute:\n  echo: true\nformat:\n  pdf:\n    keep-tex: true\n    monofont: \"JuliaMono\"\n  html:\n    code-fold: true\njupyter: julia-1.9\n---\n\n## Demo plot produced by Julia in Quarto\n\nPlot function pair (x(u), y(u)). \nSee @fig-parametric for an example.\n\nUnicode test: ` Œ±  Œ≤ ` \n(To get those symbols in Julia REPL, type \\\\alpha then tab, or \\\\beta then tab)\n\n```{julia}\n#| label: fig-parametric\n#| fig-cap: \"Parametric Plots\"\n\nusing Plots\n\nplot(sin, \n     x-&gt;sin(2x), \n     0, \n     2œÄ, \n     leg=false, \n     fill=(0,:lavender))\n```\nNow, click Render HTML in the upper right of your VS Code window. The resulting html version of your document may appear as a preview to the right, and the html file is automatically saved. Then try Render DOCX for a Word document. Then try Render PDF for a PDF. (Check the unicode symbols carefully to see if they are there. I think they should be if the above installations were done.)\nThe rendered document should display the output shown below."
  },
  {
    "objectID": "QuartoInstallNotes.html#demo-plot-produced-by-julia-in-quarto",
    "href": "QuartoInstallNotes.html#demo-plot-produced-by-julia-in-quarto",
    "title": "Quarto Installation Notes",
    "section": "Demo plot produced by Julia in Quarto",
    "text": "Demo plot produced by Julia in Quarto\nPlot function pair (x(u), y(u)). See Figure¬†1 for an example.\nUnicode test: Œ±  Œ≤ (To get those in Julia REPL, type \\alpha then tab, or \\beta then tab)\n\n\nCode\nusing Plots\n\nplot(sin, \n     x-&gt;sin(2x), \n     0, \n     2œÄ, \n     leg=false, \n     fill=(0,:lavender))\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure¬†1: Parametric Plots\n\n\n\nThe code for the example plot above came from the Quarto website: https://quarto.org/docs/computations/julia.html"
  }
]