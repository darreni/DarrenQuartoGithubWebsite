[
  {
    "objectID": "UsingGithubPagesWithQuarto.html",
    "href": "UsingGithubPagesWithQuarto.html",
    "title": "Publish with Github Pages",
    "section": "",
    "text": "These are notes on how I set up a basic website to be published using Github Pages (and with benefit of version control using Github).\nI assume you already are set up with Github and have that linked to VS Code. (If not, search for tutorials on that topic.) I am also assuming you have set up Quarto in VS Code‚Äìyou can see my notes on that here .\nOne important thing to note: For individual users, Github Pages is only for publishing public websites. If you want a private (e.g.¬†password-controlled) website, it is best to use some other hosting service.\nI thank Joshua French for his excellent Youtube guide which helped me with some of these steps."
  },
  {
    "objectID": "UsingGithubPagesWithQuarto.html#create-a-quarto-website-project",
    "href": "UsingGithubPagesWithQuarto.html#create-a-quarto-website-project",
    "title": "Publish with Github Pages",
    "section": "Create a Quarto website project",
    "text": "Create a Quarto website project\nIn VS Code, execute the ‚ÄúQuarto: Create Project‚Äù command from the command-palette. Choose ‚ÄúWebsite Project‚Äù. Choose the directory on your computer within which the project directory will be created and enter your choice for a name for your website project directory.\nThe above will create the directory and a set of files for a basic website. The home page is index.qmd and there is also an ‚Äúabout‚Äù page in about.qmd. There is also a _quarto.yml file, which is a configuration file that provides website options and defaults for pages on the site. This can be opened and inspected in VS Code.\nWith the index.qmd file open, you can click ‚ÄúRender HTML‚Äù (at the upper right) and this should produce an HTML preview of the homepage in the window to the right."
  },
  {
    "objectID": "UsingGithubPagesWithQuarto.html#set-up-correct-render-directory",
    "href": "UsingGithubPagesWithQuarto.html#set-up-correct-render-directory",
    "title": "Publish with Github Pages",
    "section": "Set up correct render directory",
    "text": "Set up correct render directory\nFor working correctly with Github Pages, we need to render to a directory called docs. To do this, add output-dir: docs under the project heading in the _quarto.yml file. This heading section will then look like this:\nproject:\n  type: website\n  output-dir: docs\nSave that and press render, and docs folder should appear in the list of files. You can now delete the _site folder."
  },
  {
    "objectID": "UsingGithubPagesWithQuarto.html#create-github-repository",
    "href": "UsingGithubPagesWithQuarto.html#create-github-repository",
    "title": "Publish with Github Pages",
    "section": "Create Github repository",
    "text": "Create Github repository\nLogin to your Github account using a web browser, and create a new repository. Give it the same name as your local project directory. You don‚Äôt need to initialize with a readme, gitignore, or license.\nThen choose ‚Äúuploading an existing file‚Äù.\nThen drag all files in your local project directory (the files created above) into the window.\nAdd brief description (e.g., ‚Äúinitial basic website setup‚Äù) and press Commit changes.\nClick Settings (upper right), then Pages (along left).\nUnder Branch, select Main.\nChange ‚Äú/root‚Äù folder to ‚Äú/docs‚Äù, then press Save.\nWait a bit, then refresh page, and see near top that ‚ÄúYour site is live at . . .‚Äù You can click that link to visit your new webpage."
  },
  {
    "objectID": "UsingGithubPagesWithQuarto.html#set-up-link-between-local-and-github-directories",
    "href": "UsingGithubPagesWithQuarto.html#set-up-link-between-local-and-github-directories",
    "title": "Publish with Github Pages",
    "section": "Set up link between local and Github directories",
    "text": "Set up link between local and Github directories\nTo set up to render and sync local folder to Github repo, you still need to link the full local folder to the Github repo. One way to do this is:\nOn the VS Code welcome page, choose ‚ÄúClone Git Repository‚Äù, then choose the name of the Github repo, then choose the local project directory, then click on ‚ÄúSelect as Repository Destination‚Äù.\nThen, the local folder is the same as the Github one, and any changes can be Staged, Committed, and Synchronized (if this doesn‚Äôt make sense, search out some tutorials on Git and Github, and working with VS Code in the context of those).\nI don‚Äôt know if this is necessary, but I added an empty .nojekyll to my project directory, as recommended here: https://quarto.org/docs/publishing/github-pages.html . This tells Github not to do any additional processing of the published site\nAn easy way to do the above: In Terminal window (at base of VS Code window), in your project directory: type touch .nojekyll which creates an empty file."
  },
  {
    "objectID": "QuartoInstallNotes.html",
    "href": "QuartoInstallNotes.html",
    "title": "Install Quarto for Julia",
    "section": "",
    "text": "These are notes on how I set up Quarto for use with Julia. I am taking these notes both to try out Quarto and to record the steps involved. I hope this will be of use for myself, students, and maybe others.\nI am assuming you already have both Julia and Visual Studio Code (i.e., VS Code) installed, with the Julia extension in VS Code. If not, follow the instructions here: https://code.visualstudio.com/docs/languages/julia . (Another option is to use some other text editor, but I highly recommend VS Code and assume it below.)\nThe following is for MacOS:\nFirst, I got set up with Juliaup and the newest version of Julia:"
  },
  {
    "objectID": "QuartoInstallNotes.html#install-juliaup-julia-version-manager",
    "href": "QuartoInstallNotes.html#install-juliaup-julia-version-manager",
    "title": "Install Quarto for Julia",
    "section": "Install Juliaup (Julia version manager)",
    "text": "Install Juliaup (Julia version manager)\nFirst, install Juliaup using this command in the Terminal:\ncurl -fsSL https://install.julialang.org | sh\nYou can then check whether you have installed Julia versions using:\njuliaup status\nIf you have no Julia version yet, or do have a version but want to upgrade to the latest, get the latest release version using:\njuliaup update release\nAt the time of writing this, the latest version of Julia is 1.9.0. The version installed on my machine is 1.9.0+0.x64.apple.darwin14.\nIf you also want an older version as an option, you can install it using something like juliaup add 1.8.5. (Not needed for most users, since newer versions of Julia run older code.)"
  },
  {
    "objectID": "QuartoInstallNotes.html#install-quarto-and-dependencies",
    "href": "QuartoInstallNotes.html#install-quarto-and-dependencies",
    "title": "Install Quarto for Julia",
    "section": "Install Quarto (and dependencies)",
    "text": "Install Quarto (and dependencies)\nThis is a somewhat lengthy process, because running Quarto relies on several other software packages, including Jupyter and iJulia. But the results are worth it! üòÉ\nI learned much of the below from: https://quarto.org/docs/computations/julia.html\nDownload and install Quarto from this site: https://quarto.org/docs/get-started/ . The version I have installed is Quarto CLI 1.3.353 (Mac OS).\nInstall the Quarto extension for VS Code (using the standard way of choosing extensions in VS Code).\n\nIJulia\nThis is a Julia package that is needed to render your Quarto files. To install, start a Julia REPL either in VS Code (using View &gt; Command Palette &gt; Julia: Start REPL) or in a terminal window by typing Julia. Then type these commands:\nusing Pkg\nPkg.add(\"IJulia\")\nThis takes a couple minutes to install, with all the dependencies.\n\n\nJupyter\nJupyter notebooks can be used with Julia, Python, and R (and the name is sort of a combination of those). Quarto uses Jupyter as an intermediate step in processing the code into output. To install Jupyter, we simply need to call an IJulia command (see below) and this will trigger a prompt asking you whether to install Jupyter. Say yes (unless perhaps you already have Jupyter installed).\nusing IJulia\nnotebook()\nThen the computer will ask install Jupyter via Conda, y/n? to which you can respond ‚Äúy‚Äù.\nAfter some processing, a Jupyter browser window will open. You can choose quit to close, and the Julia prompt returns in the REPL. After this initializing of Jupyter, you don‚Äôt need to open Jupyter in this way again (Quarto will simply use Jupyter directly).\n\n\nRevise.jl\nThis package enables Quarto to interact more efficiently with Julia when you change code. In a Julia REPL, type:\nusing Pkg\nPkg.add(\"Revise\")\nTo set up Revise to launch automatically within IJulia, create a text file containing the following:\ntry\n  @eval using Revise\ncatch e\n  @warn \"Revise init\" exception=(e, catch_backtrace())\nend\nSave the above file as .julia/config/startup_ijulia.jl (the dot at the start means this directory is hidden‚Äìthe computer will probably ask you to confirm that you want to do this).\n\n\nJupyter-cache\nThis enables smart and efficient re-execution of parts of your code (only the parts dependent on changes you‚Äôve made). In the Julia REPL, execute:\nusing Pkg\nPkg.add(\"Conda\")\nusing Conda\nConda.add(\"jupyter-cache\")"
  },
  {
    "objectID": "QuartoInstallNotes.html#almost-there",
    "href": "QuartoInstallNotes.html#almost-there",
    "title": "Install Quarto for Julia",
    "section": "Almost there!",
    "text": "Almost there!\nAfter the above, Quarto is essentially installed and should work well for rendering in HTML or DOCX. However, I found a few more things are needed for a satisfying experience rendering in PDF:\n\nlibrsvg and BasicTeX\nbrew install librsvg homebrew/cask/basictex\nFor some reason, the download of this was really slow. Administrator password was then needed, then after a while it finished successfully.\n\n\nTinyTeX\ncurl -sL \"https://yihui.org/tinytex/install-bin-unix.sh\" | sh\n\n\nJuliaMono font\nThis font works well with monocode symbols used in Julia (without it, many of these symbols were missing from PDF output).\nbrew tap homebrew/cask-fonts\nbrew install --cask font-juliamono"
  },
  {
    "objectID": "QuartoInstallNotes.html#try-a-demo-quarto-file",
    "href": "QuartoInstallNotes.html#try-a-demo-quarto-file",
    "title": "Install Quarto for Julia",
    "section": "Try a demo Quarto file",
    "text": "Try a demo Quarto file\nOK we are now ready to do a little prayer to the Quarto and Julia gods and try this all out. In VS Code make a new file called QuartoDemo.qmd. The .qmd ending is important as it tells VS Code this is a Quarto file. Put this in the file:\n---\ntitle: \"Demo Quarto File\"\nauthor: \"Darren Irwin\"\ndate: \"5/13/2023\"\nexecute:\n  echo: true\nformat:\n  pdf:\n    keep-tex: true\n    monofont: \"JuliaMono\"\n  html:\n    code-fold: true\njupyter: julia-1.9\n---\n\n## Demo plot produced by Julia in Quarto\n\nPlot function pair (x(u), y(u)). \nSee @fig-parametric for an example.\n\nUnicode test: ` Œ±  Œ≤ ` \n(To get those symbols in Julia REPL, type \\\\alpha then tab, or \\\\beta then tab)\n\n```{julia}\n#| label: fig-parametric\n#| fig-cap: \"Parametric Plots\"\n\nusing Plots\n\nplot(sin, \n     x-&gt;sin(2x), \n     0, \n     2œÄ, \n     leg=false, \n     fill=(0,:lavender))\n```\nNow, click Render HTML in the upper right of your VS Code window. The resulting html version of your document may appear as a preview to the right, and the html file is automatically saved. Then try Render DOCX for a Word document. Then try Render PDF for a PDF. (Check the unicode symbols carefully to see if they are there. I think they should be if the above installations were done.)\nThe rendered document should display the output shown below."
  },
  {
    "objectID": "QuartoInstallNotes.html#demo-plot-produced-by-julia-in-quarto",
    "href": "QuartoInstallNotes.html#demo-plot-produced-by-julia-in-quarto",
    "title": "Install Quarto for Julia",
    "section": "Demo plot produced by Julia in Quarto",
    "text": "Demo plot produced by Julia in Quarto\nPlot function pair (x(u), y(u)). See Figure¬†1 for an example.\nUnicode test: Œ±  Œ≤ (To get those in Julia REPL, type \\alpha then tab, or \\beta then tab)\n\n\nCode\nusing Plots\n\nplot(sin, \n     x-&gt;sin(2x), \n     0, \n     2œÄ, \n     leg=false, \n     fill=(0,:lavender))\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure¬†1: Parametric Plots\n\n\n\nThe code for the example plot above came from the Quarto website: https://quarto.org/docs/computations/julia.html"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DarrenQuartoGithubWebsite",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is an experimental site generated by Darren Irwin on 16 May 2023."
  },
  {
    "objectID": "AddPagesAndNavigation.html",
    "href": "AddPagesAndNavigation.html",
    "title": "Add pages and navigation",
    "section": "",
    "text": "Now that you have a basic website, you might want to add pages to it, and a menu for navigation."
  },
  {
    "objectID": "AddPagesAndNavigation.html#add-a-page",
    "href": "AddPagesAndNavigation.html#add-a-page",
    "title": "Add pages and navigation",
    "section": "Add a page",
    "text": "Add a page\nIn VS Code, create a new text file and save it with a name ending in .qmd. Put a YAML section at the front. You could simply copy it from an existing page, or do something like this which is an example YAML section from this very page you are reading right now:\n---\ntitle: \"Add pages and navigation\"\nauthor: \"Darren Irwin\"\ndate: \"5/21/2023\"\nexecute:\n  echo: true\nformat:\n  pdf:\n    keep-tex: false\n    monofont: \"JuliaMono\"\n  html:\n    code-fold: true\njupyter: julia-1.9\n---\n(We don‚Äôt actually need the jupyter: julia-1.9 line for this page, since no Julia code on it, but I‚Äôve left it there because your page might have Julia code.)\nMake sure you give your page an appropriate title in the YAML block, and then add content to this page. When ready, click ‚ÄúRender HTML‚Äù and see the rendered version of your page.\n(If you have a bunch of .qmd files that you have made changes to and you want to render them all‚Äìfor instance before committing and synchronizing with Github‚Äìyou can do this in one step by using a Terminal window and typing quarto render while in the project directory. This might take some time so be patient and let it complete before continuing. It will not show a preview in VS Code, but the Terminal window will update you about completion.)"
  },
  {
    "objectID": "AddPagesAndNavigation.html#add-navigation",
    "href": "AddPagesAndNavigation.html#add-navigation",
    "title": "Add pages and navigation",
    "section": "Add navigation",
    "text": "Add navigation\nFor adding or modifying navigation features on your website, open the quarto.yml file in your project directory. It will look someting like this:\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"MyQuartoWebsiteName\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - about.qmd\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\nAdd webpage to navigation bar\nIf you want to add your new webpage to the top navigation bar, add it to the list under the left: heading (i.e., right below - about.qmd).\n\n\nAdd sidebar navigation menu\nIf you want a sidebar listing pages that readers can navigate to, you can add a section like this in the website block (e.g., after the left block in the YAML):\n  sidebar:\n    style: \"docked\"\n    search: true\n    contents:\n      - section: \"Basics\"\n        contents:\n          - text: \"Home\"\n            file: index.qmd\n          - about.qmd\n      - section: \"Fascinating stuff\"\n        contents:\n          - QuartoInstallNotes.qmd\n          - UsingGithubPagesWithQuarto.qmd\n\n\nNavigation arrows\nIf you want the bottom of the page to show navigation arrows to the previous and next web page in your series, add page-navigation: true under the website heading of the quarto.yml file.\n\n\nPage footer\nYou can add a common footer to all the pages in your website. For instance, add page-footer: \"Here's my footer text\" under the website heading of the quarto.yml file. You can also designate left, right, and center regions of the footer and add links to other sites.\n\n\nLearn more\nTo learn more about navigation options, the Quarto website is filled with helpful info: https://quarto.org/docs/websites/website-navigation.html"
  }
]